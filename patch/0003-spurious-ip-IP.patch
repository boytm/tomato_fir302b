From c76667c90cb0912d6279ba143854161a63bc0f9d Mon Sep 17 00:00:00 2001
From: Jesse <boycht@gmail.com>
Date: Wed, 15 Oct 2014 16:13:51 +0800
Subject: [PATCH 03/26] =?UTF-8?q?=E5=A2=9E=E5=8A=A0=20spurious-ip=20?=
 =?UTF-8?q?=E9=80=89=E9=A1=B9=E7=94=A8=E6=9D=A5=E8=BF=87=E6=BB=A4=E6=81=B6?=
 =?UTF-8?q?=E6=84=8FIP,=20=E6=9D=A5=E8=87=AA=20=20=20https://github.com/st?=
 =?UTF-8?q?yx-hy/dnsmasq-chinadns?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 release/src/router/dnsmasq/dnsmasq.conf.example    |  7 +++
 release/src/router/dnsmasq/spurious_ips.conf       | 38 +++++++++++
 release/src/router/dnsmasq/src/config.h            |  9 +++
 release/src/router/dnsmasq/src/dnsmasq.c           |  1 +
 release/src/router/dnsmasq/src/dnsmasq.h           | 14 +++++
 release/src/router/dnsmasq/src/forward.c           | 45 +++++++++++--
 release/src/router/dnsmasq/src/option.c            | 73 +++++++++++++++++++++-
 release/src/router/dnsmasq/src/rfc1035.c           | 15 +++++
 release/src/router/dnsmasq/src/util.c              | 23 +++++++
 .../router/rom/rom/etc/config/spurious_ips.conf    |  1 +
 10 files changed, 219 insertions(+), 7 deletions(-)
 create mode 100644 release/src/router/dnsmasq/spurious_ips.conf
 create mode 120000 release/src/router/rom/rom/etc/config/spurious_ips.conf

diff --git a/release/src/router/dnsmasq/dnsmasq.conf.example b/release/src/router/dnsmasq/dnsmasq.conf.example
index 206f4d1..8b5934f 100644
--- a/release/src/router/dnsmasq/dnsmasq.conf.example
+++ b/release/src/router/dnsmasq/dnsmasq.conf.example
@@ -25,6 +25,13 @@
 #conf-file=%%PREFIX%%/share/dnsmasq/trust-anchors.conf
 #dnssec
 
+# Specify file containing spurious IP. dnsmasq will ignore DNS
+# replies with these IP.
+#spurious-ip-file=/etc/spurious_ips.conf
+# Or specify IP address one by one.
+#spurious-ip = 64.33.99.47
+#spurious-ip = 4.36.66.178
+
 # Replies which are not DNSSEC signed may be legitimate, because the domain
 # is unsigned, or may be forgeries. Setting this option tells dnsmasq to
 # check that an unsigned reply is OK, by finding a secure proof that a DS 
diff --git a/release/src/router/dnsmasq/spurious_ips.conf b/release/src/router/dnsmasq/spurious_ips.conf
new file mode 100644
index 0000000..c711685
--- /dev/null
+++ b/release/src/router/dnsmasq/spurious_ips.conf
@@ -0,0 +1,38 @@
+74.125.127.102
+74.125.155.102
+74.125.39.102
+74.125.39.113
+209.85.229.138
+128.121.126.139
+159.106.121.75
+169.132.13.103
+192.67.198.6
+202.106.1.2
+202.181.7.85
+203.161.230.171
+203.98.7.65
+207.12.88.98
+208.56.31.43
+209.145.54.50
+209.220.30.174
+209.36.73.33
+211.94.66.147
+213.169.251.35
+216.221.188.182
+216.234.179.13
+243.185.187.39
+37.61.54.158
+4.36.66.178
+46.82.174.68
+59.24.3.173
+64.33.88.161
+64.33.99.47
+64.66.163.251
+65.104.202.252
+65.160.219.113
+66.45.252.237
+72.14.205.104
+72.14.205.99
+78.16.49.15
+8.7.198.45
+93.46.8.89
diff --git a/release/src/router/dnsmasq/src/config.h b/release/src/router/dnsmasq/src/config.h
index 87b3170..64202d2 100644
--- a/release/src/router/dnsmasq/src/config.h
+++ b/release/src/router/dnsmasq/src/config.h
@@ -190,6 +190,14 @@ RESOLVFILE
 #   endif
 #endif
 
+#ifndef SPURIOUS_IPS
+#   if defined(__uClinux__)
+#      define SPURIOUS_IPS "/etc/config/spurious_ips.conf"
+#   else
+#      define SPURIOUS_IPS "/etc/spurious_ips.conf"
+#   endif
+#endif
+
 #ifndef RUNFILE
 #   if defined(__ANDROID__)
 #      define RUNFILE "/data/dnsmasq.pid"
@@ -265,6 +273,7 @@ HAVE_SOCKADDR_SA_LEN
 /* Select the RFC_3542 version of the IPv6 socket API. 
    Define before netinet6/in6.h is included. */
 #define __APPLE_USE_RFC_3542 
+#define NO_IPSET
 
 #elif defined(__NetBSD__)
 #define HAVE_BSD_NETWORK
diff --git a/release/src/router/dnsmasq/src/dnsmasq.c b/release/src/router/dnsmasq/src/dnsmasq.c
index 003b389..ab1929b 100644
--- a/release/src/router/dnsmasq/src/dnsmasq.c
+++ b/release/src/router/dnsmasq/src/dnsmasq.c
@@ -119,6 +119,7 @@ int main (int argc, char **argv)
   umask(022); /* known umask, create leases and pid files as 0644 */
 
   read_opts(argc, argv, compile_opts);
+  my_syslog(LOG_INFO, _("address of daemon %p"), daemon);
  
   if (daemon->edns_pktsz < PACKETSZ)
     daemon->edns_pktsz = PACKETSZ;
diff --git a/release/src/router/dnsmasq/src/dnsmasq.h b/release/src/router/dnsmasq/src/dnsmasq.h
index 47c186a..b776c37 100644
--- a/release/src/router/dnsmasq/src/dnsmasq.h
+++ b/release/src/router/dnsmasq/src/dnsmasq.h
@@ -535,6 +535,13 @@ struct resolvc {
   char *name;
 };
 
+struct spurious_ip {
+  u8 (*ip)[4];
+  int max_entry; /* maximum entries to hold in ip array. */
+  int nr_entry;
+  char *name;
+};
+
 /* adn-hosts parms from command-line (also dhcp-hostsfile and dhcp-optsfile */
 #define AH_DIR      1
 #define AH_INACTIVE 2
@@ -568,6 +575,9 @@ struct hostsfile {
 #define FREC_DO_QUESTION       64
 #define FREC_ADDED_PHEADER    128
 #define FREC_CHECK_NOSIGN     256
+#define FREC_RECURSIVE        512
+
+#define FREC_RECURSIVE_BIT      9
 
 #ifdef HAVE_DNSSEC
 #define HASH_SIZE 20 /* SHA-1 digest size */
@@ -891,6 +901,7 @@ extern struct daemon {
 
   unsigned int options, options2;
   struct resolvc default_resolv, *resolv_files;
+  struct spurious_ip spurious;
   time_t last_resolv;
   char *servers_file;
   struct mx_srv_record *mxnames;
@@ -1125,6 +1136,7 @@ int legal_hostname(char *c);
 char *canonicalise(char *s, int *nomem);
 unsigned char *do_rfc1035_name(unsigned char *p, char *sval);
 void *safe_malloc(size_t size);
+void *safe_realloc(void *p, size_t size);
 void safe_pipe(int *fd, int read_noblock);
 void *whine_malloc(size_t size);
 int sa_len(union mysockaddr *addr);
@@ -1151,6 +1163,8 @@ int read_write(int fd, unsigned char *packet, int size, int rw);
 
 int wildcard_match(const char* wildcard, const char* match);
 
+int cmp_int32(const void *a, const void *b);
+
 /* log.c */
 void die(char *message, char *arg1, int exit_code);
 int log_start(struct passwd *ent_pw, int errfd);
diff --git a/release/src/router/dnsmasq/src/forward.c b/release/src/router/dnsmasq/src/forward.c
index 9fe6afa..8f366dc 100644
--- a/release/src/router/dnsmasq/src/forward.c
+++ b/release/src/router/dnsmasq/src/forward.c
@@ -338,6 +338,9 @@ static int forward_query(int udpfd, union mysockaddr *udpaddr,
 	  memcpy(forward->hash, hash, HASH_SIZE);
 	  forward->forwardall = 0;
 	  forward->flags = 0;
+          if (header->hb3 & HB3_RD)
+            forward->flags |= FREC_RECURSIVE;
+          /* my_syslog(LOG_WARNING, _("Forward original HB3_RD: %d"), header->hb3 & HB3_RD); */
 	  if (norebind)
 	    forward->flags |= FREC_NOREBIND;
 	  if (header->hb4 & HB4_CD)
@@ -530,6 +533,7 @@ static size_t process_reply(struct dns_header *header, time_t now, struct server
   char **sets = 0;
   int munged = 0, is_sign;
   size_t plen; 
+  int extract_addr_ret = 0;
 
   (void)ad_reqd;
   (void) do_bit;
@@ -624,8 +628,13 @@ static size_t process_reply(struct dns_header *header, time_t now, struct server
 	  SET_RCODE(header, NOERROR);
 	  cache_secure = 0;
 	}
-      
-      if (extract_addresses(header, n, daemon->namebuff, now, sets, is_sign, check_rebind, no_cache, cache_secure, &doctored))
+
+        /* store the return value for later use
+           the special return value -1 is used to denote spurious IP */
+        extract_addr_ret = extract_addresses(header, n, daemon->namebuff, now,
+                                             sets, is_sign, check_rebind,
+                                             no_cache, cache_secure, &doctored);
+        if (extract_addr_ret)
 	{
 	  my_syslog(LOG_WARNING, _("possible DNS-rebind attack detected: %s"), daemon->namebuff);
 	  munged = 1;
@@ -667,6 +676,8 @@ static size_t process_reply(struct dns_header *header, time_t now, struct server
       header->nscount = htons(0);
       header->arcount = htons(0);
     }
+  if (extract_addr_ret == -1)
+      return (size_t)-1;
   
   /* the bogus-nxdomain stuff, doctor and NXDOMAIN->NODATA munging can all elide
      sections of the packet. Find the new length here and put back pseudoheader
@@ -674,6 +685,8 @@ static size_t process_reply(struct dns_header *header, time_t now, struct server
   return resize_packet(header, n, pheader, plen);
 }
 
+#define MAX_RETRY 8
+
 /* sets new last_server */
 void reply_query(int fd, int family, time_t now)
 {
@@ -683,14 +696,18 @@ void reply_query(int fd, int family, time_t now)
   union mysockaddr serveraddr;
   struct frec *forward;
   socklen_t addrlen = sizeof(serveraddr);
-  ssize_t n = recvfrom(fd, daemon->packet, daemon->packet_buff_sz, 0, &serveraddr.sa, &addrlen);
+  ssize_t n;
   size_t nn;
   struct server *server;
   void *hash;
+  int retry_cnt = 0;
 #ifndef HAVE_DNSSEC
   unsigned int crc;
 #endif
 
+retry:
+  n = recvfrom(fd, daemon->packet, daemon->packet_buff_sz, 0, &serveraddr.sa, &addrlen);
+
   /* packet buffer overwritten */
   daemon->srv_save = NULL;
   
@@ -781,6 +798,17 @@ void reply_query(int fd, int family, time_t now)
     {
       int check_rebind = 0, no_cache_dnssec = 0, cache_secure = 0;
 
+      /* the recursive desired bit has been changed by mitm */
+      if (((forward->flags & FREC_RECURSIVE) >> FREC_RECURSIVE_BIT)
+          ^ (header->hb3 & HB3_RD)) {
+        my_syslog(LOG_WARNING, _("flags: %d, hb3_rd: %d"),
+                  (forward->flags & FREC_RECURSIVE), (header->hb3 & HB3_RD));
+        if (retry_cnt++ < MAX_RETRY)
+          goto retry;
+        else
+          return;
+      }
+
       if (option_bool(OPT_NO_REBIND))
 	check_rebind = !(forward->flags & FREC_NOREBIND);
       
@@ -994,9 +1022,14 @@ void reply_query(int fd, int family, time_t now)
       else
 	header->hb4 &= ~HB4_CD;
       
-      if ((nn = process_reply(header, now, server, (size_t)n, check_rebind, no_cache_dnssec, cache_secure,
-			      forward->flags & FREC_AD_QUESTION, forward->flags & FREC_DO_QUESTION, 
-			      forward->flags & FREC_ADDED_PHEADER, forward->flags & FREC_HAS_SUBNET, &forward->source)))
+      nn = process_reply(header, now, server, (size_t)n, check_rebind, no_cache_dnssec, cache_secure,
+                         forward->flags & FREC_AD_QUESTION, forward->flags & FREC_DO_QUESTION, 
+                         forward->flags & FREC_ADDED_PHEADER, forward->flags & FREC_HAS_SUBNET, &forward->source);
+
+      if ((nn == (size_t)-1) && (retry_cnt++ < MAX_RETRY))
+          goto retry;
+
+      if (nn)
 	{
 	  header->id = htons(forward->orig_id);
 	  header->hb4 |= HB4_RA; /* recursion if available */
diff --git a/release/src/router/dnsmasq/src/option.c b/release/src/router/dnsmasq/src/option.c
index daa728f..6fcbc39 100644
--- a/release/src/router/dnsmasq/src/option.c
+++ b/release/src/router/dnsmasq/src/option.c
@@ -146,6 +146,8 @@ struct myoption {
 #define LOPT_DNSSEC_CHECK  334
 #define LOPT_LOCAL_SERVICE 335
 #define LOPT_DNSSEC_TIME   336
+#define LOPT_SPURIOUS_FILE 337
+#define LOPT_SPURIOUS_IP   338
 
 #ifdef HAVE_GETOPT_LONG
 static const struct option opts[] =  
@@ -297,6 +299,8 @@ static const struct myoption opts[] =
     { "quiet-dhcp", 0, 0, LOPT_QUIET_DHCP },
     { "quiet-dhcp6", 0, 0, LOPT_QUIET_DHCP6 },
     { "quiet-ra", 0, 0, LOPT_QUIET_RA },
+    { "spurious-ip-file", 2, 0, LOPT_SPURIOUS_FILE },
+    { "spurious-ip", 1, 0, LOPT_SPURIOUS_IP },
     { NULL, 0, 0, 0 }
   };
 
@@ -454,6 +458,8 @@ static struct {
   { LOPT_QUIET_DHCP6, OPT_QUIET_DHCP6, NULL, gettext_noop("Do not log routine DHCPv6."), NULL },
   { LOPT_QUIET_RA, OPT_QUIET_RA, NULL, gettext_noop("Do not log RA."), NULL },
   { LOPT_LOCAL_SERVICE, OPT_LOCAL_SERVICE, NULL, gettext_noop("Accept queries only from directly-connected networks"), NULL },
+  { LOPT_SPURIOUS_FILE, ARG_DUP, "<path>", gettext_noop("Specify path to spurious-ip file."), NULL }, 
+  { LOPT_SPURIOUS_IP, ARG_DUP, "<ipaddr>", gettext_noop("Specify spurious ip."), NULL },
   { 0, 0, NULL, NULL, NULL }
 }; 
 
@@ -695,6 +701,29 @@ static void do_usage(void)
     }
 }
 
+static void add_spurious_ip(char *s)
+{
+  /* skip empty string. */
+  char *token = strtok(s, ".");
+  if (!token || strpbrk(s, " \t\n\r") != NULL)
+    return;
+
+  struct spurious_ip *sp = &daemon->spurious;
+  if (sp->ip == NULL || sp->nr_entry == sp->max_entry)
+    {
+      sp->max_entry *= 2;
+      sp->ip = safe_realloc(sp->ip, sp->max_entry * sizeof(sp->ip[0]));
+    }
+
+  int j = 0;
+  do
+    {
+      sp->ip[sp->nr_entry][j++] = atoi(token);
+      /* my_syslog(LOG_INFO, _("%d"), atoi(token)); */
+    } while ((token = strtok(NULL, ".")) && j < 4);
+  sp->nr_entry++;
+}
+
 #define ret_err(x) do { strcpy(errstr, (x)); return 0; } while (0)
 
 char *parse_server(char *arg, union mysockaddr *addr, union mysockaddr *source_addr, char *interface, int *flags)
@@ -3813,6 +3842,20 @@ static int one_opt(int option, char *arg, char *errstr, char *gen_err, int comma
 	break;
       }
 #endif
+
+    case LOPT_SPURIOUS_FILE:
+      daemon->spurious.name = opt_string_alloc(arg);
+      break;
+
+    case LOPT_SPURIOUS_IP:
+      i = daemon->spurious.nr_entry;
+      add_spurious_ip(arg);
+      my_syslog(LOG_INFO, _("add spurious-ip %d.%d.%d.%d\n"),
+        daemon->spurious.ip[i][0],
+        daemon->spurious.ip[i][1],
+        daemon->spurious.ip[i][2],
+        daemon->spurious.ip[i][3]);
+      break;
 		
     default:
       ret_err(_("unsupported option (check that dnsmasq was compiled with DHCP/TFTP/DNSSEC/DBus support)"));
@@ -4142,7 +4185,24 @@ void read_servers_file(void)
   
   read_file(daemon->servers_file, f, LOPT_REV_SERV);
 }
- 
+
+void read_spurious_ip_file(char *buff)
+{
+  char *line = NULL;
+  FILE *f = NULL;
+
+  if (!(f = fopen(daemon->spurious.name, "r")))
+    {
+      my_syslog(LOG_ERR, _("cannot read %s: %s"), daemon->spurious.name, strerror(errno));
+      return;
+    }
+
+  while ((line = fgets(buff, MAXDNAME, f)))
+    add_spurious_ip(line);
+
+  my_syslog(LOG_INFO, _("load %d spurious ip"), daemon->spurious.nr_entry);
+  fclose(f);
+}
 
 #ifdef HAVE_DHCP
 void reread_dhcp(void)
@@ -4256,6 +4316,7 @@ void read_opts(int argc, char **argv, char *compile_opts)
   daemon->dhcp_server_port = DHCP_SERVER_PORT;
   daemon->default_resolv.is_default = 1;
   daemon->default_resolv.name = RESOLVFILE;
+  daemon->spurious.max_entry = 32;
   daemon->resolv_files = &daemon->default_resolv;
   daemon->username = CHUSER;
   daemon->runfile =  RUNFILE;
@@ -4484,6 +4545,16 @@ void read_opts(int argc, char **argv, char *compile_opts)
   if (daemon->if_names || daemon->if_except || daemon->if_addrs || daemon->authserver)
     reset_option_bool(OPT_LOCAL_SERVICE); 
 
+  if (daemon->spurious.name != NULL)
+    read_spurious_ip_file(buff);
+
+  struct spurious_ip *sp = &daemon->spurious;
+  /* release extra memory allocated */
+  sp->ip = safe_realloc(sp->ip, sp->nr_entry * sizeof(sp->ip[0]));
+  sp->max_entry = sp->nr_entry;
+  /* sort ip for bsearch */
+  qsort(sp->ip, sp->nr_entry, sizeof(sp->ip[0]), cmp_int32);
+
   if (testmode)
     {
       fprintf(stderr, "dnsmasq: %s.\n", _("syntax check OK"));
diff --git a/release/src/router/dnsmasq/src/rfc1035.c b/release/src/router/dnsmasq/src/rfc1035.c
index 25ac167..9f6ced3 100644
--- a/release/src/router/dnsmasq/src/rfc1035.c
+++ b/release/src/router/dnsmasq/src/rfc1035.c
@@ -892,6 +892,12 @@ static int find_soa(struct dns_header *header, size_t qlen, char *name, int *doc
   return minttl;
 }
 
+static int is_spurious(struct in_addr addr) {
+  struct spurious_ip *sp = &daemon->spurious;
+  return bsearch(&addr.s_addr, sp->ip, sp->nr_entry,
+  	sizeof(sp->ip[0]), cmp_int32) != NULL;
+}
+
 /* Note that the following code can create CNAME chains that don't point to a real record,
    either because of lack of memory, or lack of SOA records.  These are treated by the cache code as 
    expired and cleaned out that way. 
@@ -1109,6 +1115,15 @@ int extract_addresses(struct dns_header *header, size_t qlen, char *name, time_t
 			}
 #endif
 		      
+		      /* before insert it into cache, check if it is a fake addr */
+                      if (is_spurious(addr.addr.addr4)) {
+                        my_syslog(LOG_WARNING, _("spurious IP: %d.%d.%d.%d"),
+                                  ((u8 *)&addr.addr.addr4)[0],
+                                  ((u8 *)&addr.addr.addr4)[1],
+                                  ((u8 *)&addr.addr.addr4)[2],
+                                  ((u8 *)&addr.addr.addr4)[3]);
+                        return -1;
+                      }
 		      newc = cache_insert(name, &addr, now, attl, flags | F_FORWARD | secflag);
 		      if (newc && cpp)
 			{
diff --git a/release/src/router/dnsmasq/src/util.c b/release/src/router/dnsmasq/src/util.c
index 7c46d40..cbf0498 100644
--- a/release/src/router/dnsmasq/src/util.c
+++ b/release/src/router/dnsmasq/src/util.c
@@ -233,6 +233,17 @@ void *safe_malloc(size_t size)
   return ret;
 }    
 
+/* for use during startup */
+void *safe_realloc(void *p, size_t size)
+{
+  void *ret = realloc(p, size);
+  
+  if (!ret)
+    die(_("realloc could not get memory"), NULL, EC_NOMEM);
+     
+  return ret;
+}    
+
 void safe_pipe(int *fd, int read_noblock)
 {
   if (pipe(fd) == -1 || 
@@ -602,3 +613,15 @@ int wildcard_match(const char* wildcard, const char* match)
 
   return *wildcard == *match;
 }
+
+int cmp_int32(const void *a, const void *b)
+{
+  const int32_t *ia = (int32_t *)a;
+  const int32_t *ib = (int32_t *)b;
+
+  if (*ia > *ib)
+      return 1;
+  if (*ia == *ib)
+      return 0;
+  return -1;
+}
diff --git a/release/src/router/rom/rom/etc/config/spurious_ips.conf b/release/src/router/rom/rom/etc/config/spurious_ips.conf
new file mode 120000
index 0000000..4058955
--- /dev/null
+++ b/release/src/router/rom/rom/etc/config/spurious_ips.conf
@@ -0,0 +1 @@
+../../../../dnsmasq/spurious_ips.conf
\ No newline at end of file
-- 
2.1.2

